

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sun Sep 19 03:05:28 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	12F1840
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.20
    21                           ; Generated 12/02/2020 GMT
    22                           ; 
    23                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC12F1840 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  001E                     	;# 
    79  001F                     	;# 
    80  008C                     	;# 
    81  0091                     	;# 
    82  0092                     	;# 
    83  0095                     	;# 
    84  0096                     	;# 
    85  0097                     	;# 
    86  0098                     	;# 
    87  0099                     	;# 
    88  009A                     	;# 
    89  009B                     	;# 
    90  009B                     	;# 
    91  009C                     	;# 
    92  009D                     	;# 
    93  009E                     	;# 
    94  010C                     	;# 
    95  0111                     	;# 
    96  0112                     	;# 
    97  0115                     	;# 
    98  0116                     	;# 
    99  0117                     	;# 
   100  0118                     	;# 
   101  0119                     	;# 
   102  011A                     	;# 
   103  011B                     	;# 
   104  011D                     	;# 
   105  011D                     	;# 
   106  018C                     	;# 
   107  0191                     	;# 
   108  0191                     	;# 
   109  0192                     	;# 
   110  0193                     	;# 
   111  0193                     	;# 
   112  0193                     	;# 
   113  0194                     	;# 
   114  0195                     	;# 
   115  0196                     	;# 
   116  0197                     	;# 
   117  0199                     	;# 
   118  019A                     	;# 
   119  019B                     	;# 
   120  019B                     	;# 
   121  019B                     	;# 
   122  019B                     	;# 
   123  019C                     	;# 
   124  019C                     	;# 
   125  019D                     	;# 
   126  019E                     	;# 
   127  019F                     	;# 
   128  020C                     	;# 
   129  0211                     	;# 
   130  0211                     	;# 
   131  0212                     	;# 
   132  0212                     	;# 
   133  0213                     	;# 
   134  0213                     	;# 
   135  0214                     	;# 
   136  0214                     	;# 
   137  0215                     	;# 
   138  0215                     	;# 
   139  0215                     	;# 
   140  0216                     	;# 
   141  0216                     	;# 
   142  0217                     	;# 
   143  0217                     	;# 
   144  0291                     	;# 
   145  0291                     	;# 
   146  0292                     	;# 
   147  0293                     	;# 
   148  0294                     	;# 
   149  0295                     	;# 
   150  0295                     	;# 
   151  0296                     	;# 
   152  0391                     	;# 
   153  0392                     	;# 
   154  0393                     	;# 
   155  039A                     	;# 
   156  039C                     	;# 
   157  039D                     	;# 
   158  039E                     	;# 
   159  039F                     	;# 
   160  0FE4                     	;# 
   161  0FE5                     	;# 
   162  0FE6                     	;# 
   163  0FE7                     	;# 
   164  0FE8                     	;# 
   165  0FE9                     	;# 
   166  0FEA                     	;# 
   167  0FEB                     	;# 
   168  0FED                     	;# 
   169  0FEE                     	;# 
   170  0FEF                     	;# 
   171  0000                     	;# 
   172  0001                     	;# 
   173  0002                     	;# 
   174  0003                     	;# 
   175  0004                     	;# 
   176  0005                     	;# 
   177  0006                     	;# 
   178  0007                     	;# 
   179  0008                     	;# 
   180  0009                     	;# 
   181  000A                     	;# 
   182  000B                     	;# 
   183  000C                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  001E                     	;# 
   196  001F                     	;# 
   197  008C                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  010C                     	;# 
   212  0111                     	;# 
   213  0112                     	;# 
   214  0115                     	;# 
   215  0116                     	;# 
   216  0117                     	;# 
   217  0118                     	;# 
   218  0119                     	;# 
   219  011A                     	;# 
   220  011B                     	;# 
   221  011D                     	;# 
   222  011D                     	;# 
   223  018C                     	;# 
   224  0191                     	;# 
   225  0191                     	;# 
   226  0192                     	;# 
   227  0193                     	;# 
   228  0193                     	;# 
   229  0193                     	;# 
   230  0194                     	;# 
   231  0195                     	;# 
   232  0196                     	;# 
   233  0197                     	;# 
   234  0199                     	;# 
   235  019A                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019C                     	;# 
   241  019C                     	;# 
   242  019D                     	;# 
   243  019E                     	;# 
   244  019F                     	;# 
   245  020C                     	;# 
   246  0211                     	;# 
   247  0211                     	;# 
   248  0212                     	;# 
   249  0212                     	;# 
   250  0213                     	;# 
   251  0213                     	;# 
   252  0214                     	;# 
   253  0214                     	;# 
   254  0215                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0216                     	;# 
   258  0216                     	;# 
   259  0217                     	;# 
   260  0217                     	;# 
   261  0291                     	;# 
   262  0291                     	;# 
   263  0292                     	;# 
   264  0293                     	;# 
   265  0294                     	;# 
   266  0295                     	;# 
   267  0295                     	;# 
   268  0296                     	;# 
   269  0391                     	;# 
   270  0392                     	;# 
   271  0393                     	;# 
   272  039A                     	;# 
   273  039C                     	;# 
   274  039D                     	;# 
   275  039E                     	;# 
   276  039F                     	;# 
   277  0FE4                     	;# 
   278  0FE5                     	;# 
   279  0FE6                     	;# 
   280  0FE7                     	;# 
   281  0FE8                     	;# 
   282  0FE9                     	;# 
   283  0FEA                     	;# 
   284  0FEB                     	;# 
   285  0FED                     	;# 
   286  0FEE                     	;# 
   287  0FEF                     	;# 
   288  009B                     _ADRES	set	155
   289  009E                     _ADCON1bits	set	158
   290  009D                     _ADCON0bits	set	157
   291  008C                     _TRISAbits	set	140
   292  009A                     _OSCSTATbits	set	154
   293  0099                     _OSCCONbits	set	153
   294  0117                     _FVRCONbits	set	279
   295  019A                     _TXREG	set	410
   296  019D                     _RCSTAbits	set	413
   297  019B                     _SPBRG	set	411
   298  019F                     _BAUDCONbits	set	415
   299  019E                     _TXSTAbits	set	414
   300  018C                     _ANSELAbits	set	396
   301                           
   302                           	psect	stringtext1
   303  0800                     __pstringtext1:
   304  0800                     STR_1:
   305  0800  3441               	retlw	65	;'A'
   306  0801  3442               	retlw	66	;'B'
   307  0802  3443               	retlw	67	;'C'
   308  0803  3444               	retlw	68	;'D'
   309  0804  3400               	retlw	0
   310                           
   311                           	psect	stringtext2
   312  0000                     __pstringtext2:
   313                           
   314                           	psect	cinit
   315  07FD                     start_initialization:	
   316                           ; #config settings
   317                           
   318  07FD                     __initialization:
   319  07FD                     end_of_initialization:	
   320                           ;End of C runtime variable initialization code
   321                           
   322  07FD                     __end_of__initialization:
   323  07FD  0020               	movlb	0
   324  07FE  3187  2FDA         	ljmp	_main	;jump to C main() function
   325                           
   326                           	psect	cstackCOMMON
   327  0070                     __pcstackCOMMON:
   328  0070                     ?_MCUinit:
   329  0070                     ??_MCUinit:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0070                     ?_UART_write:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0070                     ??_UART_write:	
   336                           ; 1 bytes @ 0x0
   337                           
   338  0070                     ??_AnalogRead:	
   339                           ; 1 bytes @ 0x0
   340                           
   341  0070                     ?_OSCinit:	
   342                           ; 1 bytes @ 0x0
   343                           
   344  0070                     ??_OSCinit:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0070                     ?_IOinit:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ??_IOinit:	
   351                           ; 1 bytes @ 0x0
   352                           
   353  0070                     ?_ADCinit:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0070                     ??_ADCinit:	
   357                           ; 1 bytes @ 0x0
   358                           
   359  0070                     ?_UARTinit:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ??_UARTinit:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_main:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ?_AnalogRead:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     UART_write@c:	
   372                           ; 2 bytes @ 0x0
   373                           
   374                           
   375                           ; 1 bytes @ 0x0
   376  0070                     	ds	1
   377  0071                     ?_UART_writeStr:
   378  0071                     UART_writeStr@data:	
   379                           ; 1 bytes @ 0x1
   380                           
   381                           
   382                           ; 2 bytes @ 0x1
   383  0071                     	ds	2
   384  0073                     ??_UART_writeStr:
   385                           
   386                           ; 1 bytes @ 0x3
   387  0073                     	ds	1
   388  0074                     ??_main:
   389                           
   390                           ; 1 bytes @ 0x4
   391  0074                     	ds	2
   392                           
   393                           	psect	maintext
   394  07DA                     __pmaintext:	
   395 ;;
   396 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   397 ;;
   398 ;; *************** function _main *****************
   399 ;; Defined at:
   400 ;;		line 35 in file "main.c"
   401 ;; Parameters:    Size  Location     Type
   402 ;;		None
   403 ;; Auto vars:     Size  Location     Type
   404 ;;		None
   405 ;; Return value:  Size  Location     Type
   406 ;;                  1    wreg      void 
   407 ;; Registers used:
   408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   409 ;; Tracked objects:
   410 ;;		On entry : B1F/0
   411 ;;		On exit  : 0/0
   412 ;;		Unchanged: 0/0
   413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   414 ;;      Params:         0       0       0       0
   415 ;;      Locals:         0       0       0       0
   416 ;;      Temps:          2       0       0       0
   417 ;;      Totals:         2       0       0       0
   418 ;;Total ram usage:        2 bytes
   419 ;; Hardware stack levels required when called: 2
   420 ;; This function calls:
   421 ;;		_AnalogRead
   422 ;;		_MCUinit
   423 ;;		_UART_write
   424 ;;		_UART_writeStr
   425 ;; This function is called by:
   426 ;;		Startup code after reset
   427 ;; This function uses a non-reentrant model
   428 ;;
   429                           
   430                           
   431                           ;psect for function _main
   432  07DA                     _main:
   433  07DA                     l770:	
   434                           ;incstack = 0
   435                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   436                           
   437                           
   438                           ;main.c: 37:     MCUinit();
   439  07DA  3187  278E  3187   	fcall	_MCUinit
   440  07DD                     l772:
   441                           
   442                           ;main.c: 41:   {;main.c: 56:     UART_writeStr("ABCD");
   443  07DD  3000               	movlw	low (STR_1| (0+32768))
   444  07DE  00F1               	movwf	UART_writeStr@data
   445  07DF  3088               	movlw	high (STR_1| (0+32768))
   446  07E0  00F2               	movwf	UART_writeStr@data+1
   447  07E1  3187  27A9  3187   	fcall	_UART_writeStr
   448  07E4                     l774:
   449                           
   450                           ;main.c: 57:     UART_write(0x0A);
   451  07E4  300A               	movlw	10
   452  07E5  3187  2779  3187   	fcall	_UART_write
   453  07E8                     l776:
   454                           
   455                           ;main.c: 58:     UART_write(0x0D);
   456  07E8  300D               	movlw	13
   457  07E9  3187  2779  3187   	fcall	_UART_write
   458  07EC                     l778:
   459                           
   460                           ;main.c: 60:     AnalogRead();
   461  07EC  3187  2782  3187   	fcall	_AnalogRead
   462  07EF                     l780:
   463                           
   464                           ;main.c: 61:     _delay((unsigned long)((1000)*(4000000/4000.0)));
   465  07EF  3006               	movlw	6
   466  07F0  00F5               	movwf	??_main+1
   467  07F1  3013               	movlw	19
   468  07F2  00F4               	movwf	??_main
   469  07F3  30AE               	movlw	174
   470  07F4                     u77:
   471  07F4  0B89               	decfsz	9,f
   472  07F5  2FF4               	goto	u77
   473  07F6  0BF4               	decfsz	??_main,f
   474  07F7  2FF4               	goto	u77
   475  07F8  0BF5               	decfsz	??_main+1,f
   476  07F9  2FF4               	goto	u77
   477  07FA  2FDD               	goto	l772
   478  07FB  3180  2802         	ljmp	start
   479  07FD                     __end_of_main:
   480                           
   481                           	psect	text1
   482  07A9                     __ptext1:	
   483 ;; *************** function _UART_writeStr *****************
   484 ;; Defined at:
   485 ;;		line 143 in file "main.c"
   486 ;; Parameters:    Size  Location     Type
   487 ;;  data            2    1[COMMON] PTR unsigned char 
   488 ;;		 -> STR_1(5), 
   489 ;; Auto vars:     Size  Location     Type
   490 ;;		None
   491 ;; Return value:  Size  Location     Type
   492 ;;                  1    wreg      void 
   493 ;; Registers used:
   494 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   495 ;; Tracked objects:
   496 ;;		On entry : 0/0
   497 ;;		On exit  : 0/0
   498 ;;		Unchanged: 0/0
   499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   500 ;;      Params:         2       0       0       0
   501 ;;      Locals:         0       0       0       0
   502 ;;      Temps:          1       0       0       0
   503 ;;      Totals:         3       0       0       0
   504 ;;Total ram usage:        3 bytes
   505 ;; Hardware stack levels used: 1
   506 ;; Hardware stack levels required when called: 1
   507 ;; This function calls:
   508 ;;		_UART_write
   509 ;; This function is called by:
   510 ;;		_main
   511 ;; This function uses a non-reentrant model
   512 ;;
   513                           
   514                           
   515                           ;psect for function _UART_writeStr
   516  07A9                     _UART_writeStr:
   517  07A9                     l762:	
   518                           ;incstack = 0
   519                           ; Regs used in _UART_writeStr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   520                           
   521                           
   522                           ;main.c: 144:     while(*data){
   523  07A9  2FB6               	goto	l768
   524  07AA                     l764:
   525                           
   526                           ;main.c: 145:        UART_write(*data++);
   527  07AA  0871               	movf	UART_writeStr@data,w
   528  07AB  0084               	movwf	4
   529  07AC  0872               	movf	UART_writeStr@data+1,w
   530  07AD  0085               	movwf	5
   531  07AE  0800               	movf	0,w	;code access
   532  07AF  3187  2779  3187   	fcall	_UART_write
   533  07B2                     l766:
   534  07B2  3001               	movlw	1
   535  07B3  07F1               	addwf	UART_writeStr@data,f
   536  07B4  3000               	movlw	0
   537  07B5  3DF2               	addwfc	UART_writeStr@data+1,f
   538  07B6                     l768:
   539                           
   540                           ;main.c: 144:     while(*data){
   541  07B6  0871               	movf	UART_writeStr@data,w
   542  07B7  0084               	movwf	4
   543  07B8  0872               	movf	UART_writeStr@data+1,w
   544  07B9  0085               	movwf	5
   545  07BA  0012               	moviw fsr0++
   546  07BB  1D03               	btfss	3,2
   547  07BC  2FBE               	goto	u61
   548  07BD  2FBF               	goto	u60
   549  07BE                     u61:
   550  07BE  2FAA               	goto	l764
   551  07BF                     u60:
   552  07BF                     l94:
   553  07BF  0008               	return
   554  07C0                     __end_of_UART_writeStr:
   555                           
   556                           	psect	text2
   557  0779                     __ptext2:	
   558 ;; *************** function _UART_write *****************
   559 ;; Defined at:
   560 ;;		line 138 in file "main.c"
   561 ;; Parameters:    Size  Location     Type
   562 ;;  c               1    wreg     unsigned char 
   563 ;; Auto vars:     Size  Location     Type
   564 ;;  c               1    0[COMMON] unsigned char 
   565 ;; Return value:  Size  Location     Type
   566 ;;                  1    wreg      void 
   567 ;; Registers used:
   568 ;;		wreg
   569 ;; Tracked objects:
   570 ;;		On entry : 0/0
   571 ;;		On exit  : 0/0
   572 ;;		Unchanged: 0/0
   573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   574 ;;      Params:         0       0       0       0
   575 ;;      Locals:         1       0       0       0
   576 ;;      Temps:          0       0       0       0
   577 ;;      Totals:         1       0       0       0
   578 ;;Total ram usage:        1 bytes
   579 ;; Hardware stack levels used: 1
   580 ;; This function calls:
   581 ;;		Nothing
   582 ;; This function is called by:
   583 ;;		_main
   584 ;;		_UART_writeStr
   585 ;; This function uses a non-reentrant model
   586 ;;
   587                           
   588                           
   589                           ;psect for function _UART_write
   590  0779                     _UART_write:
   591                           
   592                           ;incstack = 0
   593                           ; Regs used in _UART_write: [wreg]
   594                           ;UART_write@c stored from wreg
   595  0779  00F0               	movwf	UART_write@c
   596  077A                     l702:
   597  077A                     l85:	
   598                           ;main.c: 139:     while(!TXSTAbits.TRMT);
   599                           
   600  077A  0023               	movlb	3	; select bank3
   601  077B  1C9E               	btfss	30,1	;volatile
   602  077C  2F7E               	goto	u11
   603  077D  2F7F               	goto	u10
   604  077E                     u11:
   605  077E  2F7A               	goto	l85
   606  077F                     u10:
   607  077F                     l704:
   608                           
   609                           ;main.c: 140:     TXREG = c;
   610  077F  0870               	movf	UART_write@c,w
   611  0780  009A               	movwf	26	;volatile
   612  0781                     l88:
   613  0781  0008               	return
   614  0782                     __end_of_UART_write:
   615                           
   616                           	psect	text3
   617  078E                     __ptext3:	
   618 ;; *************** function _MCUinit *****************
   619 ;; Defined at:
   620 ;;		line 67 in file "main.c"
   621 ;; Parameters:    Size  Location     Type
   622 ;;		None
   623 ;; Auto vars:     Size  Location     Type
   624 ;;		None
   625 ;; Return value:  Size  Location     Type
   626 ;;                  1    wreg      void 
   627 ;; Registers used:
   628 ;;		wreg, status,2, status,0, pclath, cstack
   629 ;; Tracked objects:
   630 ;;		On entry : 0/0
   631 ;;		On exit  : 0/0
   632 ;;		Unchanged: 0/0
   633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   634 ;;      Params:         0       0       0       0
   635 ;;      Locals:         0       0       0       0
   636 ;;      Temps:          0       0       0       0
   637 ;;      Totals:         0       0       0       0
   638 ;;Total ram usage:        0 bytes
   639 ;; Hardware stack levels used: 1
   640 ;; Hardware stack levels required when called: 1
   641 ;; This function calls:
   642 ;;		_ADCinit
   643 ;;		_IOinit
   644 ;;		_OSCinit
   645 ;;		_UARTinit
   646 ;; This function is called by:
   647 ;;		_main
   648 ;; This function uses a non-reentrant model
   649 ;;
   650                           
   651                           
   652                           ;psect for function _MCUinit
   653  078E                     _MCUinit:
   654  078E                     l728:	
   655                           ;incstack = 0
   656                           ; Regs used in _MCUinit: [wreg+status,2+status,0+pclath+cstack]
   657                           
   658                           
   659                           ;main.c: 68:     OSCinit();
   660  078E  3187  279B  3187   	fcall	_OSCinit
   661  0791                     l730:
   662                           
   663                           ;main.c: 69:     IOinit();
   664  0791  3187  276C  3187   	fcall	_IOinit
   665  0794                     l732:
   666                           
   667                           ;main.c: 70:     ADCinit();
   668  0794  3187  27C0  3187   	fcall	_ADCinit
   669  0797                     l734:
   670                           
   671                           ;main.c: 72:     UARTinit();
   672  0797  3187  2770  3187   	fcall	_UARTinit
   673  079A                     l55:
   674  079A  0008               	return
   675  079B                     __end_of_MCUinit:
   676                           
   677                           	psect	text4
   678  0770                     __ptext4:	
   679 ;; *************** function _UARTinit *****************
   680 ;; Defined at:
   681 ;;		line 128 in file "main.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;		None
   684 ;; Auto vars:     Size  Location     Type
   685 ;;		None
   686 ;; Return value:  Size  Location     Type
   687 ;;                  1    wreg      void 
   688 ;; Registers used:
   689 ;;		wreg
   690 ;; Tracked objects:
   691 ;;		On entry : 0/0
   692 ;;		On exit  : 0/0
   693 ;;		Unchanged: 0/0
   694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   695 ;;      Params:         0       0       0       0
   696 ;;      Locals:         0       0       0       0
   697 ;;      Temps:          0       0       0       0
   698 ;;      Totals:         0       0       0       0
   699 ;;Total ram usage:        0 bytes
   700 ;; Hardware stack levels used: 1
   701 ;; This function calls:
   702 ;;		Nothing
   703 ;; This function is called by:
   704 ;;		_MCUinit
   705 ;; This function uses a non-reentrant model
   706 ;;
   707                           
   708                           
   709                           ;psect for function _UARTinit
   710  0770                     _UARTinit:
   711  0770                     l720:	
   712                           ;incstack = 0
   713                           ; Regs used in _UARTinit: [wreg]
   714                           
   715                           
   716                           ;main.c: 129:     TXSTAbits.SYNC = 0;
   717  0770  0023               	movlb	3	; select bank3
   718  0771  121E               	bcf	30,4	;volatile
   719                           
   720                           ;main.c: 130:     TXSTAbits.BRGH = 1;
   721  0772  151E               	bsf	30,2	;volatile
   722                           
   723                           ;main.c: 131:     BAUDCONbits.BRG16 = 0;
   724  0773  119F               	bcf	31,3	;volatile
   725  0774                     l722:
   726                           
   727                           ;main.c: 132:     SPBRG = 25;
   728  0774  3019               	movlw	25
   729  0775  009B               	movwf	27	;volatile
   730  0776                     l724:
   731                           
   732                           ;main.c: 134:     RCSTAbits.SPEN = 1;
   733  0776  179D               	bsf	29,7	;volatile
   734  0777                     l726:
   735                           
   736                           ;main.c: 135:     TXSTAbits.TXEN = 1;
   737  0777  169E               	bsf	30,5	;volatile
   738  0778                     l82:
   739  0778  0008               	return
   740  0779                     __end_of_UARTinit:
   741                           
   742                           	psect	text5
   743  079B                     __ptext5:	
   744 ;; *************** function _OSCinit *****************
   745 ;; Defined at:
   746 ;;		line 76 in file "main.c"
   747 ;; Parameters:    Size  Location     Type
   748 ;;		None
   749 ;; Auto vars:     Size  Location     Type
   750 ;;		None
   751 ;; Return value:  Size  Location     Type
   752 ;;                  1    wreg      void 
   753 ;; Registers used:
   754 ;;		wreg, status,2, status,0
   755 ;; Tracked objects:
   756 ;;		On entry : 0/0
   757 ;;		On exit  : 0/0
   758 ;;		Unchanged: 0/0
   759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   760 ;;      Params:         0       0       0       0
   761 ;;      Locals:         0       0       0       0
   762 ;;      Temps:          0       0       0       0
   763 ;;      Totals:         0       0       0       0
   764 ;;Total ram usage:        0 bytes
   765 ;; Hardware stack levels used: 1
   766 ;; This function calls:
   767 ;;		Nothing
   768 ;; This function is called by:
   769 ;;		_MCUinit
   770 ;; This function uses a non-reentrant model
   771 ;;
   772                           
   773                           
   774                           ;psect for function _OSCinit
   775  079B                     _OSCinit:
   776  079B                     l706:	
   777                           ;incstack = 0
   778                           ; Regs used in _OSCinit: [wreg+status,2+status,0]
   779                           
   780                           
   781                           ;main.c: 77:     OSCCONbits.SCS = 0B10;
   782  079B  0021               	movlb	1	; select bank1
   783  079C  0819               	movf	25,w	;volatile
   784  079D  39FC               	andlw	-4
   785  079E  3802               	iorlw	2
   786  079F  0099               	movwf	25	;volatile
   787                           
   788                           ;main.c: 78:     OSCCONbits.IRCF = 0B1101;
   789  07A0  0819               	movf	25,w	;volatile
   790  07A1  3987               	andlw	-121
   791  07A2  3868               	iorlw	104
   792  07A3  0099               	movwf	25	;volatile
   793  07A4                     l58:	
   794                           ;main.c: 79:     while(OSCSTATbits.HFIOFS != 1);
   795                           
   796  07A4  1C1A               	btfss	26,0	;volatile
   797  07A5  2FA7               	goto	u21
   798  07A6  2FA8               	goto	u20
   799  07A7                     u21:
   800  07A7  2FA4               	goto	l58
   801  07A8                     u20:
   802  07A8                     l61:
   803  07A8  0008               	return
   804  07A9                     __end_of_OSCinit:
   805                           
   806                           	psect	text6
   807  076C                     __ptext6:	
   808 ;; *************** function _IOinit *****************
   809 ;; Defined at:
   810 ;;		line 82 in file "main.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;		None
   813 ;; Auto vars:     Size  Location     Type
   814 ;;		None
   815 ;; Return value:  Size  Location     Type
   816 ;;                  1    wreg      void 
   817 ;; Registers used:
   818 ;;		None
   819 ;; Tracked objects:
   820 ;;		On entry : 0/0
   821 ;;		On exit  : 0/0
   822 ;;		Unchanged: 0/0
   823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   824 ;;      Params:         0       0       0       0
   825 ;;      Locals:         0       0       0       0
   826 ;;      Temps:          0       0       0       0
   827 ;;      Totals:         0       0       0       0
   828 ;;Total ram usage:        0 bytes
   829 ;; Hardware stack levels used: 1
   830 ;; This function calls:
   831 ;;		Nothing
   832 ;; This function is called by:
   833 ;;		_MCUinit
   834 ;; This function uses a non-reentrant model
   835 ;;
   836                           
   837                           
   838                           ;psect for function _IOinit
   839  076C                     _IOinit:
   840  076C                     l708:	
   841                           ;incstack = 0
   842                           ; Regs used in _IOinit: []
   843                           
   844                           
   845                           ;main.c: 83:     TRISAbits.TRISA0 = 0;
   846  076C  0021               	movlb	1	; select bank1
   847  076D  100C               	bcf	12,0	;volatile
   848                           
   849                           ;main.c: 84:     TRISAbits.TRISA1 = 1;
   850  076E  148C               	bsf	12,1	;volatile
   851  076F                     l64:
   852  076F  0008               	return
   853  0770                     __end_of_IOinit:
   854                           
   855                           	psect	text7
   856  07C0                     __ptext7:	
   857 ;; *************** function _ADCinit *****************
   858 ;; Defined at:
   859 ;;		line 94 in file "main.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;		None
   862 ;; Auto vars:     Size  Location     Type
   863 ;;		None
   864 ;; Return value:  Size  Location     Type
   865 ;;                  1    wreg      void 
   866 ;; Registers used:
   867 ;;		wreg, status,2, status,0
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   873 ;;      Params:         0       0       0       0
   874 ;;      Locals:         0       0       0       0
   875 ;;      Temps:          0       0       0       0
   876 ;;      Totals:         0       0       0       0
   877 ;;Total ram usage:        0 bytes
   878 ;; Hardware stack levels used: 1
   879 ;; This function calls:
   880 ;;		Nothing
   881 ;; This function is called by:
   882 ;;		_MCUinit
   883 ;; This function uses a non-reentrant model
   884 ;;
   885                           
   886                           
   887                           ;psect for function _ADCinit
   888  07C0                     _ADCinit:
   889  07C0                     l710:	
   890                           ;incstack = 0
   891                           ; Regs used in _ADCinit: [wreg+status,2+status,0]
   892                           
   893                           
   894                           ;main.c: 96:     TRISAbits.TRISA4 = 1;
   895  07C0  0021               	movlb	1	; select bank1
   896  07C1  160C               	bsf	12,4	;volatile
   897                           
   898                           ;main.c: 97:     ANSELAbits.ANSA4 = 1;
   899  07C2  0023               	movlb	3	; select bank3
   900  07C3  160C               	bsf	12,4	;volatile
   901  07C4                     l712:
   902                           
   903                           ;main.c: 98:     ADCON0bits.CHS = 3;
   904  07C4  0021               	movlb	1	; select bank1
   905  07C5  081D               	movf	29,w	;volatile
   906  07C6  3983               	andlw	-125
   907  07C7  380C               	iorlw	12
   908  07C8  009D               	movwf	29	;volatile
   909  07C9                     l714:
   910                           
   911                           ;main.c: 100:     FVRCONbits.FVREN = 1;
   912  07C9  0022               	movlb	2	; select bank2
   913  07CA  1797               	bsf	23,7	;volatile
   914                           
   915                           ;main.c: 101:     FVRCONbits.ADFVR = 3;
   916  07CB  3003               	movlw	3
   917  07CC  0497               	iorwf	23,f	;volatile
   918  07CD                     l67:	
   919                           ;main.c: 102:     while(!FVRCONbits.FVRRDY);
   920                           
   921  07CD  1F17               	btfss	23,6	;volatile
   922  07CE  2FD0               	goto	u31
   923  07CF  2FD1               	goto	u30
   924  07D0                     u31:
   925  07D0  2FCD               	goto	l67
   926  07D1                     u30:
   927  07D1                     l716:
   928                           
   929                           ;main.c: 104:     ADCON1bits.ADPREF = 3;
   930  07D1  3003               	movlw	3
   931  07D2  0021               	movlb	1	; select bank1
   932  07D3  049E               	iorwf	30,f	;volatile
   933                           
   934                           ;main.c: 105:     ADCON1bits.ADCS = 4;
   935  07D4  081E               	movf	30,w	;volatile
   936  07D5  398F               	andlw	-113
   937  07D6  3840               	iorlw	64
   938  07D7  009E               	movwf	30	;volatile
   939  07D8                     l718:
   940                           
   941                           ;main.c: 106:     ADCON0bits.ADON = 1;
   942  07D8  141D               	bsf	29,0	;volatile
   943  07D9                     l70:
   944  07D9  0008               	return
   945  07DA                     __end_of_ADCinit:
   946                           
   947                           	psect	text8
   948  0782                     __ptext8:	
   949 ;; *************** function _AnalogRead *****************
   950 ;; Defined at:
   951 ;;		line 109 in file "main.c"
   952 ;; Parameters:    Size  Location     Type
   953 ;;		None
   954 ;; Auto vars:     Size  Location     Type
   955 ;;  temp            2    0        int 
   956 ;; Return value:  Size  Location     Type
   957 ;;                  2    8[None  ] int 
   958 ;; Registers used:
   959 ;;		wreg
   960 ;; Tracked objects:
   961 ;;		On entry : 0/0
   962 ;;		On exit  : 0/0
   963 ;;		Unchanged: 0/0
   964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   965 ;;      Params:         0       0       0       0
   966 ;;      Locals:         0       0       0       0
   967 ;;      Temps:          0       0       0       0
   968 ;;      Totals:         0       0       0       0
   969 ;;Total ram usage:        0 bytes
   970 ;; Hardware stack levels used: 1
   971 ;; This function calls:
   972 ;;		Nothing
   973 ;; This function is called by:
   974 ;;		_main
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           
   979                           ;psect for function _AnalogRead
   980  0782                     _AnalogRead:
   981  0782                     l744:	
   982                           ;incstack = 0
   983                           ; Regs used in _AnalogRead: [wreg]
   984                           
   985                           
   986                           ;main.c: 110:     int temp;;main.c: 112:     _delay((unsigned long)((5)*(4000000/4000000
      +                          .0)));
   987  0782  3200               	nop2	;2 cycle nop
   988  0783  3200               	nop2	;2 cycle nop
   989  0784  0000               	nop
   990                           
   991                           ;main.c: 113:     ADCON0bits.GO_nDONE = 1;
   992  0785  0021               	movlb	1	; select bank1
   993  0786  149D               	bsf	29,1	;volatile
   994  0787                     l73:	
   995                           ;main.c: 114:     while(ADCON0bits.GO_nDONE);
   996                           
   997  0787  189D               	btfsc	29,1	;volatile
   998  0788  2F8A               	goto	u51
   999  0789  2F8B               	goto	u50
  1000  078A                     u51:
  1001  078A  2F87               	goto	l73
  1002  078B                     u50:
  1003  078B                     l746:
  1004  078B  081B               	movf	27,w	;volatile
  1005  078C  081C               	movf	28,w	;volatile
  1006  078D                     l76:
  1007  078D  0008               	return
  1008  078E                     __end_of_AnalogRead:
  1009  007E                     btemp	set	126	;btemp
  1010  007E                     wtemp0	set	126
  1011                           
  1012                           	psect	config
  1013                           
  1014                           ;Config register CONFIG1 @ 0x8007
  1015                           ;	Oscillator Selection
  1016                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  1017                           ;	Watchdog Timer Enable
  1018                           ;	WDTE = OFF, WDT disabled
  1019                           ;	Power-up Timer Enable
  1020                           ;	PWRTE = OFF, PWRT disabled
  1021                           ;	MCLR Pin Function Select
  1022                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  1023                           ;	Flash Program Memory Code Protection
  1024                           ;	CP = OFF, Program memory code protection is disabled
  1025                           ;	Data Memory Code Protection
  1026                           ;	CPD = OFF, Data memory code protection is disabled
  1027                           ;	Brown-out Reset Enable
  1028                           ;	BOREN = OFF, Brown-out Reset disabled
  1029                           ;	Clock Out Enable
  1030                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  1031                           ;	Internal/External Switchover
  1032                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1033                           ;	Fail-Safe Clock Monitor Enable
  1034                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1035  8007                     	org	32775
  1036  8007  09A4               	dw	2468
  1037                           
  1038                           ;Config register CONFIG2 @ 0x8008
  1039                           ;	Flash Memory Self-Write Protection
  1040                           ;	WRT = OFF, Write protection off
  1041                           ;	PLL Enable
  1042                           ;	PLLEN = OFF, 4x PLL disabled
  1043                           ;	Stack Overflow/Underflow Reset Enable
  1044                           ;	STVREN = OFF, Stack Overflow or Underflow will not cause a Reset
  1045                           ;	Brown-out Reset Voltage Selection
  1046                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  1047                           ;	Low-Voltage Programming Enable
  1048                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  1049  8008                     	org	32776
  1050  8008  1CFF               	dw	7423

Data Sizes:
    Strings     5
    Constant    0
    Data        0
    BSS         0
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       6
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    UART_writeStr@data	PTR unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), 


Critical Paths under _main in COMMON

    _main->_UART_writeStr
    _UART_writeStr->_UART_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     156
                                              4 COMMON     2     2      0
                         _AnalogRead
                            _MCUinit
                         _UART_write
                      _UART_writeStr
 ---------------------------------------------------------------------------------
 (1) _UART_writeStr                                        3     1      2     136
                                              1 COMMON     3     1      2
                         _UART_write
 ---------------------------------------------------------------------------------
 (2) _UART_write                                           1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _MCUinit                                              0     0      0       0
                            _ADCinit
                             _IOinit
                            _OSCinit
                           _UARTinit
 ---------------------------------------------------------------------------------
 (2) _UARTinit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCinit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOinit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADCinit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AnalogRead                                           2     2      0       5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AnalogRead
   _MCUinit
     _ADCinit
     _IOinit
     _OSCinit
     _UARTinit
   _UART_write
   _UART_writeStr
     _UART_write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       6       2       42.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sun Sep 19 03:05:28 2021

                     l61 07A8                       l70 07D9                       l55 079A  
                     l64 076F                       l73 0787                       l58 07A4  
                     l82 0778                       l67 07CD                       l76 078D  
                     l85 077A                       l94 07BF                       l88 0781  
                     u10 077F                       u11 077E                       u20 07A8  
                     u21 07A7                       u30 07D1                       u31 07D0  
                     u50 078B                       u51 078A                       u60 07BF  
                     u61 07BE                       u77 07F4                      l710 07C0  
                    l702 077A                      l712 07C4                      l720 0770  
                    l704 077F                      l714 07C9                      l706 079B  
                    l722 0774                      l730 0791                      l716 07D1  
                    l708 076C                      l724 0776                      l732 0794  
                    l718 07D8                      l726 0777                      l734 0797  
                    l744 0782                      l728 078E                      l746 078B  
                    l762 07A9                      l770 07DA                      l764 07AA  
                    l780 07EF                      l772 07DD                      l766 07B2  
                    l774 07E4                      l768 07B6                      l776 07E8  
                    l778 07EC                      wreg 0009          __end_of_ADCinit 07DA  
                   STR_1 0800          __end_of_MCUinit 079B                     _main 07DA  
             _AnalogRead 0782          __end_of_OSCinit 07A9                     fsr0h 0005  
                   indf0 0000                     fsr0l 0004                     btemp 007E  
                   start 0002                    ?_main 0070                    _ADRES 009B  
                  _SPBRG 019B                    _TXREG 019A         __end_of_UARTinit 0779  
            ?_UART_write 0070                    status 0003                    wtemp0 007E  
      UART_writeStr@data 0071          __initialization 07FD             __end_of_main 07FD  
              ??_ADCinit 0070                   ??_main 0074                ??_MCUinit 0070  
              ??_OSCinit 0070              ?_AnalogRead 0070                   _IOinit 076C  
    __size_of_UART_write 0009  __end_of__initialization 07FD           __pcstackCOMMON 0070  
              ?_UARTinit 0070      __size_of_AnalogRead 000C                  ?_IOinit 0070  
             __pmaintext 07DA    __end_of_UART_writeStr 07C0               ??_UARTinit 0070  
                _ADCinit 07C0                  _MCUinit 078E                  _OSCinit 079B  
           ??_UART_write 0070          __size_of_IOinit 0004       __end_of_UART_write 0782  
                __ptext1 07A9                  __ptext2 0779                  __ptext3 078E  
                __ptext4 0770                  __ptext5 079B                  __ptext6 076C  
                __ptext7 07C0                  __ptext8 0782     end_of_initialization 07FD  
           ??_AnalogRead 0070                _RCSTAbits 019D              UART_write@c 0070  
     __end_of_AnalogRead 078E                _TRISAbits 008C                _TXSTAbits 019E  
         __end_of_IOinit 0770              _BAUDCONbits 019F        __size_of_UARTinit 0009  
    start_initialization 07FD                 ??_IOinit 0070                 ?_ADCinit 0070  
              ___latbits 0001                 ?_MCUinit 0070                 ?_OSCinit 0070  
 __size_of_UART_writeStr 0017                 _UARTinit 0770               _ADCON0bits 009D  
             _ADCON1bits 009E         __size_of_ADCinit 001A         __size_of_MCUinit 000D  
       __size_of_OSCinit 000E            _UART_writeStr 07A9               _ANSELAbits 018C  
          __size_of_main 0023           ?_UART_writeStr 0071              _OSCSTATbits 009A  
             _FVRCONbits 0117               _OSCCONbits 0099            __pstringtext1 0800  
          __pstringtext2 0000               _UART_write 0779          ??_UART_writeStr 0073  
